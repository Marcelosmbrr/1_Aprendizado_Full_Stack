SISTEMA DE MÓDULOS: REUTILIZANDO CÓDIGO E ESTRUTURAS ENTRE ARQUIVOS
//https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Guide/Modules

O QUE É O SISTEMA DE MÓDULOS? **************************************************************************************/

Em JavaScript, a palavra “módulos” refere-se a pequenas unidades de código independente e reutilizável
Pode-se dizer, na teoria, que cada arquivo .js é um módulo, mas, na prática, ocorre uma especificação dessa classificação
Desta forma o sistema de módulos fornece mecanismos para dividir reaproveitar códigos e estruturas entre diferentes arquivos de extensão js

ENTENDA O QUE É COMMONJS E ECMASCRIPT **********************************************************************************/

Antes de explicar mais deve-se entender o seguinte: existem as features do CommonJS e as do Ecmascript
ECMAScript (ES) é a padronização da linguagem JavaScript //Sempre que há uma nova atualização dos recursos do JavaScript, ela é lançada pelo ECMAScript
CommonJS é um projeto, não filiado ao ES, cujo objetivo é especificar um ambiente Javascript no lado do servidor

SISTEMA DE MÓDULOS DO ES6 E DO COMMONJS - SÃO DIFERENTES ***********************************************************************/

O Sistema de Módulos foi implementado primeiro pelo CommonJS, com o sistema require/module.exports
No ES6, a sexta versão da padronização do JS, foi implementado o sistema de módulos com Import/Export

ARQUIVOS CLASSIFICADOS COMO MÓDULOS ES6 E A EXTENSÃO .MJS **********************************************************************************************************/

//Desde o surgimento dos módulos com o ES6, o NodeJS implementou uma solução para adaptar a feature a sua tecnologia
//O Node.js trata os arquivos de extensão .cjs como módulos CommonJS, e os de extensão .mjs arquivos como módulos ECMAScript

QUANDO UTILIZAR .MJS E .JS ******************************************************************************************************************************************/

//No contexto do NodeJS, como na execução pelo VSCode, é necessário, para uso dos módulos ES6, o uso da extensão .mjs; ver a documentação linkada no topo do arquivo
//No entanto, no contexto do Browser, e como diz na documentação da MDN, não é recomendado o uso desta extensão
//Dentre os diversos motivos para que seja utilizada apenas no ambiente de testes, está a incompatibilidade com diversas ferramentas, como o TypeScript
