https://imasters.com.br/back-end/o-padrao-singleton-com-php
https://www.devmedia.com.br/php-singleton-aplicando-o-padrao-de-projeto-na-pratica/28469

Se entendi, para aplicar o padrão SINGLETON deve haver uma classe intermediária para instanciar uma outra.
É a classe intermediária que realiza a instância a partir do termo reservado "new", mas apenas se já não existir uma.
Assim, o padrão se concretiza quando, ao invés de instanciarmos uma classe, com "new", toda vez, para acessar seus recursos, chamamos o método estático criado da classe intermediária.

Classe Intermediária para aplicar o SINGLETON também possui um atributo estático privado, que serve unicamente para realizar a condicional, pois a cada instância ele próprio a recebe.
Não apenas para realizar a condicional, esse atributo serve para retornar a instância para o segmento da aplicação em que é necessária.

Além deste todo, que ao meu entender seria o básico do funcionamento, que aprendi tentando fazer funcionar, alguns modelos apresentamo outros métodos, mas que são para fins de segurança.
A exemplo, pode haver um método construtor privado apenas para que não possa ser chamado. Também podem haver alguns métodos mágicos, do próprio PHP, sem tarefa alguma para realizar, vazios, para não serem utilizados fora da aplicação.
Exemplos de métodos mágicos que poderiam prejudicar a aplicação seriam: __clone(), __wakeup() e o próprio __construct().

Exemplo:

1 - Existe a Classe A que precisa dos recursos da Classe B.
2 - Criamos a Classe C que aplica o padrão SINGLETON verificando se já existe uma instância da classe B. Se não existir, é criada uma e retornada, se existir, é só retornada. 
2.1 - Esta classe C possui apenas um método funcional, que aplica a verificação e os retornos da instância da Classe B. Além disso, esse método é necessariamente estático.
3 - A partir da Classe A chamamos o método estático da Classe C, e com isso recuperamos uma instância da Classe B.


